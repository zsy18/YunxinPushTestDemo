ext {

    imVersion = "9.14.0"
    //云信的appkey，对应清单文件中的com.netease.nim.appKey的值
    APP_KEY = "4727023efa991d31d61b3b32e819bd5b"
    //配置本次打包的应用包名，需要和厂商推送上申请证书用到的包名保持一致
    APPLICATION_ID = "com.netease.nim.demo"
    GRANDL_PLUGIN = "com.android.tools.build:gradle:7.2.0"

    /**
     * FCM推送相关配置:
     * 如果使用FCM推送，需要用FCM官网上下载的客户端json证书替换项目中的google-services.json文件
     */
    //云信控制台上FCM推送证书的证书名称
    fcmCertificateName = "myfcmtest"
    //fcm通知类型推送使用的通知通道，如果不配置服务端会默认指定为“nim_message_channel_001”
    fcmChannelId = ""
    //是否使用新版（FCM HTTP V1 推送）,根据云信控制台对应的证书名是否为V1版本配置。
    fcmHttpV1Enable = true

    /**
     * 荣耀推送相关配置：
     * 1、如果使用荣耀推送，需要用荣耀官网上下载的客户端json证书替换项目中的mcs-services.json文件
     * 2、荣耀推送token生成需要在华为控制台应用下添加打包签名文件的证书指纹，下面的证书指纹为本项目debug.keystore的SHA256值
     * 可以添加到对应测试应用的“SHA256证书指纹”配置项中，或者把已经添加过证书指纹的keystore文件替换本项目的debug.keystore文件。
     * SHA256: 45:C9:74:1D:F5:67:38:42:A8:0A:C4:BD:BF:45:01:D9:4B:E5:04:79:F1:07:5E:28:CC:E8:12:D1:B2:C4:E8:8C
     */
    // 传入荣耀推送证书名
    honorAppId = "100100577"
    //云信控制台上对应推送证书的证书名称
    honorCertificateName = "honorTest"
    //推送消息分类-配置前需在第三方平台（荣耀）申请消息自分类权益，具体详见 荣耀官方文档
    //此处配置后会替换云信控制台中-“第三方消息推送分类 子功能配置”中的设置
    honorImportance = "NORMAL"


    /**
     * 华为推送相关配置：
     * 1、如果使用华为推送，需要用华为官网上下载的客户端json证书替换项目中的agconnect-services.json文件
     * 2、华为推送token生成需要在华为控制台应用下添加打包签名文件的证书指纹，下面的证书指纹为本项目debug.keystore的SHA256值
     * 可以添加到对应测试应用的“SHA256证书指纹”配置项中，或者把已经添加过证书指纹的keystore文件替换本项目的debug.keystore文件。
     * 否则会出现错误：“6003: certificate fingerprint error”
     * SHA256: 45:C9:74:1D:F5:67:38:42:A8:0A:C4:BD:BF:45:01:D9:4B:E5:04:79:F1:07:5E:28:CC:E8:12:D1:B2:C4:E8:8C
     */
    // 传入华为推送的APP ID
    hwAppId = "104770765"
    // 传入云信控制台上华为推送证书名称
    hwCertificateName = "huaweiceshi"
    //推送消息分类-配置前需在第三方平台（华为）申请消息自分类权益，具体详见 华为官方文档
    //此处配置后会替换云信控制台中-“第三方消息推送分类 子功能配置”中的设置
    hwCategory = "IM"
    //推送消息使用的通知通道
    hwChannelId = ""

    /**
     * OPPO推送相关配置
     */
    oppoAppId = "31564223"
    oppoAppKey = "e5a3fb46306f45c780b3be1f3b1e7c32"
    // 注意区分AppSercet与MasterSecret
    oppoAppSercet = "0be0ee1ef3fb431587efd2a0f0a30a43"
    // 传入云信控制台上配置的oppo推送证书名称
    oppoCertificateName = "certificat_oppo"
    //推送消息分类-请提前在第三方平台（OPPO）申请channel并完成消息分类配置后，将channel对应的channel_id获取填入上方即可完成配置，具体详见 OPPO官方文档
    //此处配置后会替换云信控制台中-“第三方消息推送分类 子功能配置”中的设置
    oppoChannelId = ""

    /**
     * vivo推送相关配置
     */
    //// 传入云信控制台上配置的vivo推送证书名称
    vivoCertificateName = "vivoTest"
    //你的 vivo 推送 app key
    vivoAppKey = "a51da7ed008d22de3ad7937be1e707f7"
    //你的 vivo 推送的 app id
    vivoAppId = "103397457"
    //推送消息分类-请提前在第三方平台（OPPO）申请channel并完成消息分类配置后，将channel对应的channel_id获取填入下方即可完成配置，具体详见 OPPO官方文档
    //此处配置后会替换云信控制台中-“第三方消息推送分类 子功能配置”中的设置
    vivoCategory = "IM"

    /**
     * 小米推送相关配置信息
     */
    //小米推送平台获取到的AppId
    xmAppId = "2882303761520055541"
    //小米推送平台获取到的AppKey
    xmAppKey = "5222005592541"
    //云信控制台上小米推送对应的证书名称
    xmCertificateName = "xiaomi_test1"
    //推送消息分类-请提前在第三方平台（小米）申请channel并完成消息分类配置后，将channel对应的channel_id获取填入上方即可完成配置，具体详见 小米官方文档
    //此处配置后会替换云信控制台中-“第三方消息推送分类 子功能配置”中的设置
    xmChannelId = ""

    /**
     * 魅族推送相关配置
     */
    mzAppId = "148192"
    mzAppKey = "6068c5a8323542deaf83ad5b6d3ca9e2"
    // 传入云信控制台上配置的魅族推送证书名称
    mzCertificateName = "meizuTest"
    mzChannelId = ""
}

//添加标志位，保证只执行一次
int count = 0
gradle.afterProject {

//    println("getName():" + project.name)

    gradle.getRootProject().getAllprojects().forEach {
        println("afterProject:" + it.name)
        if (it.plugins.hasPlugin("com.android.application") && count == 0) {
            count = 1
            it.dependencies {
                implementation project(path: ':pushLib')
            }
            //根据主应用下的华为的agconnect-services.json文件配置决定是否要添加华为的plugin
            def huaweiJsonPath = "${it.name}/agconnect-services.json"
            println("huaweiJsonPath:" + huaweiJsonPath)
            def huaweiJsonConfigFile = file(huaweiJsonPath)
            if (huaweiJsonConfigFile.exists()) {
                it.plugins.apply("com.huawei.agconnect")
                println("add huawei plugin")
            } else {
                println("huawei json config file is not exists")
            }

            //根据主应用下的google的google-services.json文件配置决定是否要添加华为的plugin
            def googleJsonConfigFile = file("${it.name}/google-services.json")
            if (googleJsonConfigFile.exists()) {
                it.plugins.apply("com.google.gms.google-services")
                println("add google plugin")
            } else {
                println("google json config file is not exists")
            }

            //根据主应用下的google的google-services.json文件配置决定是否要添加华为的plugin
            def honerJsonConfigFile = file("${it.name}/mcs-services.json")
            if (honerJsonConfigFile.exists()) {
                it.plugins.apply("com.hihonor.mcs.asplugin")
                println("add honer plugin")
            } else {
                println("honer json config file is not exists")
            }
        }
    }
}